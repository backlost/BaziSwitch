 var EightLunar = function() {

 	//每弧度的角秒数
 	rad = 180 * 3600 / Math.PI;
 	//每弧度的角度数
 	RAD = 180 / Math.PI;

 	//2000年前儒略日数(2000-1-1 12:00:00格林威治平时)
 	var J2000 = 2451545;
 	//日期元件
 	var JDate = {
 		Y: 2000,
 		M: 1,
 		D: 1,
 		h: 12,
 		m: 0,
 		s: 0,

 		//世界时与原子时之差计算表
 		dts: new Array(-4000, 108371.7, -13036.80, 392.000, 0.0000, -500, 17201.0, -
 			627.82, 16.170, -0.3413, -150, 12200.6, -346.41, 5.403, -0.1593, 150,
 			9113.8, -328.13, -1.647, 0.0377,
 			500, 5707.5, -391.41, 0.915, 0.3145, 900, 2203.4, -283.45, 13.034, -
 			0.1778,
 			1300, 490.1, -57.35, 2.085, -0.0072, 1600, 120.0, -9.81, -1.532, 0.1403,
 			1700, 10.2, -0.91, 0.510, -0.0370, 1800, 13.4, -0.72, 0.202, -0.0193,
 			1830, 7.8, -1.81, 0.416, -0.0247, 1860, 8.3, -0.13, -0.406, 0.0292,
 			1880, -5.4, 0.32, -0.183, 0.0173, 1900, -2.3, 2.06, 0.169, -0.0135,
 			1920, 21.2, 1.69, -0.304, 0.0167, 1940, 24.2, 1.22, -0.064, 0.0031,
 			1960, 33.2, 0.51, 0.231, -0.0109, 1980, 51.0, 1.29, -0.026, 0.0032,
 			2000, 64.7, -1.66, 5.224, -0.2905, 2150, 279.4, 732.95, 429.579, 0.0158,
 			6000),


 		//计算世界时与原子时之差,传入年
 		deltatT: function(y) {
 			var i, d = this.dts;
 			for (i = 0; i < 100; i += 5)
 				if (y < d[i + 5] || i == 95) break;
 			var t1 = (y - d[i]) / (d[i + 5] - d[i]) * 10,
 				t2 = t1 * t1,
 				t3 = t2 * t1;
 			return d[i + 1] + d[i + 2] * t1 + d[i + 3] * t2 + d[i + 4] * t3;
 		},

 		//传入儒略日(J2000起算),计算UTC与原子时的差(单位:日)
 		deltatT2: function(jd) {
 			return this.deltatT(jd / 365.2425 + 2000) / 86400.0;
 		},

 		//公历转儒略日,UTC=1表示原日期是UTC
 		toJD: function(UTC) {
 			var y = this.Y,
 				m = this.M,
 				n = 0; //取出年月
 			if (m <= 2) m += 12, y--;
 			if (this.Y * 372 + this.M * 31 + this.D >= 588829) //判断是否为格里高利历日1582*372+10*31+15
 				n = int2(y / 100), n = 2 - n + int2(n / 4); //加百年闰
 			n += int2(365.2500001 * (y + 4716)); //加上年引起的偏移日数
 			n += int2(30.6 * (m + 1)) + this.D; //加上月引起的偏移日数及日偏移数
 			n += ((this.s / 60 + this.m) / 60 + this.h) / 24 - 1524.5;
 			if (UTC) return n + this.deltatT2(n - J2000);
 			return n;
 		},

 		//儒略日数转公历,UTC=1表示目标公历是UTC
 		setFromJD: function(jd, UTC) {

 			if (UTC) jd -= this.deltatT2(jd - J2000);
 			jd += 0.5;
 			var A = int2(jd),
 				F = jd - A,
 				//取得日数的整数部份A及小数部分F
 				D;
 			if (A > 2299161) D = int2((A - 1867216.25) / 36524.25), A += 1 + D -
 				int2(D / 4);
 			//向前移4年零2个月
 			A += 1524;
 			//年
 			this.Y = int2((A - 122.1) / 365.25);
 			//去除整年日数后余下日数
 			D = A - int2(365.25 * this.Y);
 			this.M = int2(D / 30.6001); //月数
 			this.D = D - int2(this.M * 30.6001); //去除整月日数后余下日数
 			this.Y -= 4716;
 			this.M--;
 			if (this.M > 12) this.M -= 12;
 			if (this.M <= 2) this.Y++;
 			//日的小数转为时分秒
 			F *= 24;
 			this.h = int2(F);
 			F -= this.h;
 			F *= 60;
 			this.m = int2(F);
 			F -= this.m;
 			F *= 60;
 			this.s = F;
 		},
 		//设置时间,参数例:"20000101 120000"或"20000101"
 		setFromStr: function(s) {
 			this.Y = s.substr(0, 4) - 0;
 			this.M = s.substr(4, 2) - 0;
 			this.D = s.substr(6, 2) - 0;
 			this.h = s.substr(9, 2) - 0;
 			this.m = s.substr(11, 2) - 0;
 			this.s = s.substr(13, 5) - 0;
 		},
 		//日期转为串
 		toStr: function() {
 			var Y = "     " + this.Y,
 				M = "0" + this.M,
 				D = "0" + this.D;
 			var h = this.h,
 				m = this.m,
 				s = Math.floor(this.s + .5);
 			if (s >= 60) s -= 60, m++;
 			if (m >= 60) m -= 60, h++;
 			h = "0" + h;
 			m = "0" + m;
 			s = "0" + s;
 			Y = Y.substr(Y.length - 5, 5);
 			M = M.substr(M.length - 2, 2);
 			D = D.substr(D.length - 2, 2);
 			h = h.substr(h.length - 2, 2);
 			m = m.substr(m.length - 2, 2);
 			s = s.substr(s.length - 2, 2);
 			return Y + "-" + M + "-" + D + " " + h + ":" + m + ":" + s;
 		},

 		/*	算出:jd转到当地UTC后,UTC日数的整数部分或小数部分
 			基于J2000力学时jd的起算点是12:00:00时,所以跳日时刻发生在12:00:00,这与日历计算发生矛盾
 			把jd改正为00:00:00起算,这样儒略日的跳日动作就与日期的跳日同步
 			改正方法为jd=jd+0.5-deltatT+shiqu/24
 			把儒略日的起点移动-0.5(即前移12小时)
 			式中shiqu是时区,北京的起算点是-8小时,shiqu取8*/
 		Dint_dec: function(jd, shiqu, int_dec) {

 			var u = jd + 0.5 - this.deltatT2(jd) + shiqu / 24;
 			if (int_dec) return Math.floor(u); //返回整数部分
 			else return u - Math.floor(u); //返回小数部分
 		},

 		/*计算两个日期的相差的天数,输入字串格式日期,如:"20080101"*/
 		d1_d2: function(d1, d2) {
 			var Y = this.Y,
 				M = this.M,
 				D = this.D,
 				h = this.h,
 				m = this.m,
 				s = this.s; //备份原来的数据
 			this.setFromStr(d1.substr(0, 8) + " 120000");
 			var jd1 = this.toJD(0);
 			this.setFromStr(d2.substr(0, 8) + " 120000");
 			var jd2 = this.toJD(0);

 			this.Y = Y, this.M = M, this.D = D, this.h = h, this.m = m, this.s = s; //还原
 			if (jd1 > jd2) return Math.floor(jd1 - jd2 + .0001);
 			else return -Math.floor(jd2 - jd1 + .0001);
 		}
 	};

 	/*
 	 *对超过0-2PI的角度转为0-2PI
 	 * @param {Number} v 待转换角度
 	 * return 转化后角度
 	 */
 	function rad2mrad(v) {
 		v = v % (2 * Math.PI);
 		if (v < 0) return v + 2 * Math.PI;
 		return v;
 	}

 	//调用Enn前先设置EnnT时间变量
 	var EnnT = 0;
 	//计算E10,E11,E20等,即:某一组周期项或泊松项算出,计算前先设置EnnT时间
 	function Enn(F) {
 		var i, v = 0;
 		for (i = 0; i < F.length; i += 3)
 			v += F[i] * Math.cos(F[i + 1] + EnnT * F[i + 2]);
 		return v;
 	}

 	/*
 	 * 地心坐标中的日月位置计算
 	 * @param {Number} t1 J2000起算儒略日数
 	 * @param {Number} lx lx=1时计算t时刻日月角距与jiao的差, lx=0计算t时刻太阳黄经与jiao的差
 	 *				   t 传入的t是指定角度对应真时刻t
 	 * return 时间 	 传出角度
 	 */
 	function earCal(jd) {
 		EnnT = jd / 365250;
 		var llr = new Array();
 		var t1 = EnnT,
 			t2 = t1 * t1,
 			t3 = t2 * t1,
 			t4 = t3 * t1,
 			t5 = t4 * t1;
 		llr[0] = Enn(E10) + Enn(E11) * t1 + Enn(E12) * t2 + Enn(E13) * t3 +
 			Enn(E14) *
 			t4 + Enn(E15) * t5;
 		llr[1] = Enn(E20) + Enn(E21) * t1;
 		llr[2] = Enn(E30) + Enn(E31) * t1 + Enn(E32) * t2 + Enn(E33) * t3;
 		llr[0] = rad2mrad(llr[0]);
 		return llr;
 	}

 	//===============光行差==================
 	//离心率
 	var GXC_e = new Array(0.016708634, -0.000042037, -0.0000001267);
 	//近点
 	var GXC_p = new Array(102.93735 / RAD, 1.71946 / RAD, 0.00046 / RAD);
 	//太平黄经
 	var GXC_l = new Array(280.4664567 / RAD, 36000.76982779 / RAD, 0.0003032028 /
 		RAD, 1 / 49931000 / RAD, -1 / 153000000 / RAD);
 	//光行差常数
 	var GXC_k = 20.49552 / rad;


 	/*
 	 * 恒星周年光行差计算(黄道坐标中)
 	 * @param {Number} t
 	 * @param {Number} zb
 	 * return
 	 */
 	function addGxc(t, zb) {
 		var t1 = t / 36525,
 			t2 = t1 * t1,
 			t3 = t2 * t1,
 			t4 = t3 * t1;
 		var L = GXC_l[0] + GXC_l[1] * t1 + GXC_l[2] * t2 + GXC_l[3] * t3 +
 			GXC_l[4] *
 			t4;
 		var p = GXC_p[0] + GXC_p[1] * t1 + GXC_p[2] * t2;
 		var e = GXC_e[0] + GXC_e[1] * t1 + GXC_e[2] * t2;
 		var dL = L - zb[0],
 			dP = p - zb[0];
 		zb[0] -= GXC_k * (Math.cos(dL) - e * Math.cos(dP)) / Math.cos(zb[1]);
 		zb[1] -= GXC_k * Math.sin(zb[1]) * (Math.sin(dL) - e * Math.sin(dP));
 		zb[0] = rad2mrad(zb[0]);
 	}


 	//计算黄经章动及交角章动
 	function nutation(t) {
 		var d = new Array();
 		d.Lon = 0;
 		d.Obl = 0;
 		t /= 36525;
 		var i, c, t1 = t,
 			t2 = t1 * t1,
 			t3 = t2 * t1,
 			t4 = t3 * t1,
 			t5 = t4 * t1;
 		for (i = 0; i < nutB.length; i += 9) {
 			c = nutB[i] + nutB[i + 1] * t1 + nutB[i + 2] * t2 + nutB[i + 3] * t3 +
 				nutB[i + 4] * t4;
 			d.Lon += (nutB[i + 5] + nutB[i + 6] * t / 10) * Math.sin(c); //黄经章动
 			d.Obl += (nutB[i + 7] + nutB[i + 8] * t / 10) * Math.cos(c); //交角章动
 		}
 		d.Lon /= rad * 10000; //黄经章动
 		d.Obl /= rad * 10000; //交角章动
 		return d;
 	}



 	//计算M10,M11,M20等,计算前先设置MnnT时间
 	function Mnn(F) {
 		var i, v = 0,
 			t1 = MnnT,
 			t2 = t1 * t1,
 			t3 = t2 * t1,
 			t4 = t3 * t1;
 		for (i = 0; i < F.length; i += 6)
 			v += F[i] * Math.sin(F[i + 1] + t1 * F[i + 2] + t2 * F[i + 3] + t3 *
 				F[i +
 					4] + t4 * F[i + 5]);
 		return v;
 	}

 	//Date黄道上的岁差p
 	var preceB = new Array(0, 50287.92262, 111.24406, 0.07699, -0.23479, -
 		0.00178,
 		0.00018, 0.00001);

 	//补岁差
 	function addPrece(jd, zb) {
 		var i, t = 1,
 			v = 0,
 			t1 = jd / 365250;
 		for (i = 1; i < 8; i++) t *= t1, v += preceB[i] * t;
 		zb[0] = rad2mrad(zb[0] + (v + 2.9965 * t1) / rad);
 	}



 	//返回月球位置,返回地心Date黄道坐标
 	function moonCal(jd) {

 		MnnT = jd / 36525;
 		var t1 = MnnT,
 			t2 = t1 * t1,
 			t3 = t2 * t1,
 			t4 = t3 * t1;
 		var llr = new Array();
 		llr[0] = (Mnn(M10) + Mnn(M11) * t1 + Mnn(M12) * t2) / rad;
 		llr[1] = (Mnn(M20) + Mnn(M21) * t1) / rad;
 		llr[2] = (Mnn(M30) + Mnn(M31) * t1) * 0.999999999923532;
 		llr[0] = llr[0] + M1n[0] + M1n[1] * t1 + M1n[2] * t2 + M1n[3] *
 			t3 + M1n[4] *
 			t4;
 		//地心Date黄道原点坐标(不含岁差)
 		llr[0] = rad2mrad(llr[0]);
 		//补岁差
 		addPrece(jd, llr);
 		return llr;
 	}


 	/*
 	 * 地心坐标中的日月位置计算
 	 * @param {Number} t1 J2000起算儒略日数
 	 * @param {Number} lx lx=1时计算t时刻日月角距与jiao的差, lx=0计算t时刻太阳黄经与jiao的差
 	 *				   t 传入的t是指定角度对应真时刻t
 	 * return 时间 	 传出角度
 	 */
 	function jiaoCai(lx, t, jiao) {
 		//计算太阳真位置(先算出日心坐标中地球的位置)
 		var sun = earCal(t);
 		sun[0] += Math.PI;
 		sun[1] = -sun[1]; //转为地心坐标
 		addGxc(t, sun); //补周年光行差
 		if (lx == 0) {
 			var d = nutation(t);
 			sun[0] += d.Lon; //补黄经章动
 			return rad2mrad(jiao - sun[0]);
 		}
 		var moon = moonCal(t); //日月角差与章动无关
 		return rad2mrad(jiao - (moon[0] - sun[0]));
 	}



 	/*
 	 * 已知角度(jiao)求时间(t)
 	 * @param {Number} t1 J2000起算儒略日数
 	 * @param {Number} lx lx=0是太阳黄经达某角度的时刻计算(用于节气计算)
 	 *					  lx=1是日月角距达某角度的时刻计算(用于定朔望等)
 	 * @param {Number} jiao 已知角度
 	 * return 时间 	对于节气计算,应满足t在t1到t1+360天之间,对于Y年第n个节气(n=0是春分),t1可取值Y*365.2422+n*15.2
 	 *				对于朔望计算,应满足t在t1到t1+25天之间
 	 */

 	function jiaoCal(t1, jiao, lx) {
 		var t2 = t1,
 			t = 0,
 			v;

 		//在t1到t2范围内求解(范气360天范围),结果置于t
 		if (lx == 0)
 			t2 += 360;
 		else t2 += 25;

 		//待搜索目标角
 		jiao *= Math.PI / 180;

 		//利用截弦法计算
 		//v1,v2为t1,t2时对应的黄经
 		var v1 = jiaoCai(lx, t1, jiao);
 		var v2 = jiaoCai(lx, t2, jiao);

 		//减2pi作用是将周期性角度转为连续角度
 		if (v1 < v2) v2 -= 2 * Math.PI;
 		var k = 1,

 			//k是截弦的斜率
 			k2, i;

 		//快速截弦求根,通常截弦三四次就已达所需精度
 		for (i = 0; i < 10; i++) {

 			//算出斜率
 			k2 = (v2 - v1) / (t2 - t1);

 			//差商可能为零,应排除
 			if (Math.abs(k2) > 1e-15) k = k2;
 			t = t1 - v1 / k;

 			//直线逼近法求根(直线方程的根)
 			v = jiaoCai(lx, t, jiao);

 			//一次逼近后,v1就已接近0,如果很大,则应减1周
 			if (v > 1) v -= 2 * Math.PI;

 			//已达精度
 			if (Math.abs(v) < 1e-8) break;
 			t1 = t2, v1 = v2;

 			//下一次截弦
 			t2 = t, v2 = v;
 		}
 		return t;
 	}

 	//农历排月序计算,可定出农历
 	function paiYue(yearArg) {
 		y = yearArg - 0;
 		var zq = new Array(),
 			jq = new Array(),
 			//中气表,节气表,日月合朔表
 			hs = new Array();

 		//从冬至开始,连续计算14个中气时刻
 		//农历年首始于前一年的冬至,为了节气中气一起算,取前年大雪之前
 		var i, t1 = 365.2422 * (y - 2000) - 50;
 		//计算节气(从冬至开始),注意:返回的是力学时
 		for (i = 0; i < 14; i++) {
 			//中气计算,冬至的太阳黄经是270度(或-90度)
 			zq[i] = jiaoCal(t1 + i * 30.4, i * 30 - 90, 0);
 			//顺便计算节气,它不是农历定朔计算所必需的
 			jq[i] = jiaoCal(t1 + i * 30.4, i * 30 - 105, 0);
 		}
 		//在冬至过后,连续计算14个日月合朔时刻
 		//冬至过后的第一天0点的儒略日数
 		var dongZhiJia1 = zq[0] + 1 - JDate.Dint_dec(zq[0], 8, 0) + 1e-13;
 		//首月结束的日月合朔时刻
 		hs[0] = jiaoCal(dongZhiJia1, 0, 1);
 		for (i = 1; i < 14; i++) hs[i] = jiaoCal(hs[i - 1] + 25, 0, 1);
 		//算出中气及合朔时刻的日数(不含小数的日数计数,以便计算日期之间的差值)
 		var A = new Array(),
 			B = new Array(),
 			C = new Array();
 		//取当地UTC日数的整数部分
 		for (i = 0; i < 14; i++) {
 			A[i] = JDate.Dint_dec(zq[i], 8, 1);
 			B[i] = JDate.Dint_dec(jq[i], 8, 1);
 			C[i] = JDate.Dint_dec(hs[i], 8, 1);
 		}

 		//闰月及大小月分析
 		var tot = 12,
 			nun = -1,
 			//月编号
 			yn = new Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0);
 		//闰月分析
 		if (C[12] <= A[12]) {
 			//编号为12的月是本年的有效月份,本年总月数13个
 			yn[12] = 12, tot = 13;
 			for (i = 1; i < 13; i++)
 				if (C[i] <= A[i]) break;
 				//注意yn中不含农历首月(所以取i-1),在公历中农历首月总是去年的所以不多做计算
 			for (nun = i - 1; i < 13; i++) yn[i - 1] --;
 		}
 		//转为建寅月名,并做大小月分析
 		for (i = 0; i < tot; i++) {
 			//转建寅月名
 			yn[i] = yueMing[(yn[i] + 10) % 12];
 			if (i == nun) yn[i] += "闰";
 			//标记是否闰月
 			else yn[i] += "月";
 			if (C[i + 1] - C[i] > 29) yn[i] += "大";
 			//标记大小月
 			else yn[i] += "小"
 		}
 		//显示
 		var out = "节气    手表时            中气    手表时            农历月   朔的手表时\r\n";
 		for (i = 0; i < tot; i++) {
 			var zm = (i * 2 + 18) % 24,
 				//中气名节气名
 				jm = (i * 2 + 17) % 24;
 			JDate.setFromJD(jq[i] + J2000 + 8 / 24, 1);
 			//显示节气
 			out += jqB[jm] + ":" + JDate.toStr() + " ";
 			JDate.setFromJD(zq[i] + J2000 + 8 / 24, 1);
 			//显示中气
 			out += jqB[zm] + ":" + JDate.toStr() + " ";
 			JDate.setFromJD(hs[i] + J2000 + 8 / 24, 1);
 			//显示日月合朔
 			out += yn[i] + ":" + JDate.toStr() + "\r\n";
 		}
 		console.log(out);
 		return out;
 	}


 	//地球运动VSOP87参数
 	var E10 = new Array( //黄经周期项
 		1.75347045673, 0.00000000000, 0.0000000000, 0.03341656456, 4.66925680417,
 		6283.0758499914, 0.00034894275, 4.62610241759, 12566.1516999828,
 		0.00003417571, 2.82886579606, 3.5231183490,
 		0.00003497056, 2.74411800971, 5753.3848848968, 0.00003135896,
 		3.62767041758,
 		77713.7714681205, 0.00002676218, 4.41808351397, 7860.4193924392,
 		0.00002342687, 6.13516237631, 3930.2096962196,
 		0.00001273166, 2.03709655772, 529.6909650946, 0.00001324292, 0.74246356352,
 		11506.7697697936, 0.00000901855, 2.04505443513, 26.2983197998,
 		0.00001199167, 1.10962944315, 1577.3435424478,
 		0.00000857223, 3.50849156957, 398.1490034082, 0.00000779786, 1.17882652114,
 		5223.6939198022, 0.00000990250, 5.23268129594, 5884.9268465832,
 		0.00000753141, 2.53339053818, 5507.5532386674,
 		0.00000505264, 4.58292563052, 18849.2275499742, 0.00000492379,
 		4.20506639861, 775.5226113240, 0.00000356655, 2.91954116867, 0.0673103028,
 		0.00000284125, 1.89869034186, 796.2980068164,
 		0.00000242810, 0.34481140906, 5486.7778431750, 0.00000317087,
 		5.84901952218,
 		11790.6290886588, 0.00000271039, 0.31488607649, 10977.0788046990,
 		0.00000206160, 4.80646606059, 2544.3144198834,
 		0.00000205385, 1.86947813692, 5573.1428014331, 0.00000202261,
 		2.45767795458,
 		6069.7767545534, 0.00000126184, 1.08302630210, 20.7753954924,
 		0.00000155516,
 		0.83306073807, 213.2990954380,
 		0.00000115132, 0.64544911683, 0.9803210682, 0.00000102851, 0.63599846727,
 		4694.0029547076, 0.00000101724, 4.26679821365, 7.1135470008, 0.00000099206,
 		6.20992940258, 2146.1654164752,
 		0.00000132212, 3.41118275555, 2942.4634232916, 0.00000097607,
 		0.68101272270,
 		155.4203994342, 0.00000085128, 1.29870743025, 6275.9623029906,
 		0.00000074651, 1.75508916159, 5088.6288397668,
 		0.00000101895, 0.97569221824, 15720.8387848784, 0.00000084711,
 		3.67080093025, 71430.6956181291, 0.00000073547, 4.67926565481,
 		801.8209311238, 0.00000073874, 3.50319443167, 3154.6870848956,
 		0.00000078756, 3.03698313141, 12036.4607348882, 0.00000079637,
 		1.80791330700, 17260.1546546904, 0.00000085803, 5.98322631256,
 		161000.6857376741, 0.00000056963, 2.78430398043, 6286.5989683404,
 		0.00000061148, 1.81839811024, 7084.8967811152, 0.00000069627,
 		0.83297596966,
 		9437.7629348870, 0.00000056116, 4.38694880779, 14143.4952424306,
 		0.00000062449, 3.97763880587, 8827.3902698748,
 		0.00000051145, 0.28306864501, 5856.4776591154, 0.00000055577,
 		3.47006009062,
 		6279.5527316424, 0.00000041036, 5.36817351402, 8429.2412664666,
 		0.00000051605, 1.33282746983, 1748.0164130670,
 		0.00000051992, 0.18914945834, 12139.5535091068, 0.00000049000,
 		0.48735065033, 1194.4470102246, 0.00000039200, 6.16832995016,
 		10447.3878396044, 0.00000035566, 1.77597314691, 6812.7668150860,
 		0.00000036770, 6.04133859347, 10213.2855462110, 0.00000036596,
 		2.56955238628, 1059.3819301892, 0.00000033291, 0.59309499459,
 		17789.8456197850, 0.00000035954, 1.70876111898, 2352.8661537718);
 	var E11 = new Array( //黄经泊松1项
 		6283.31966747491, 0.00000000000, 0.0000000000, 0.00206058863,
 		2.67823455584,
 		6283.0758499914, 0.00004303430, 2.63512650414, 12566.1516999828,
 		0.00000425264, 1.59046980729, 3.5231183490,
 		0.00000108977, 2.96618001993, 1577.3435424478, 0.00000093478,
 		2.59212835365,
 		18849.2275499742, 0.00000119261, 5.79557487799, 26.2983197998,
 		0.00000072122, 1.13846158196, 529.6909650946,
 		0.00000067768, 1.87472304791, 398.1490034082, 0.00000067327, 4.40918235168,
 		5507.5532386674, 0.00000059027, 2.88797038460, 5223.6939198022,
 		0.00000055976, 2.17471680261, 155.4203994342,
 		0.00000045407, 0.39803079805, 796.2980068164, 0.00000036369, 0.46624739835,
 		775.5226113240, 0.00000028958, 2.64707383882, 7.1135470008, 0.00000019097,
 		1.84628332577, 5486.7778431750,
 		0.00000020844, 5.34138275149, 0.9803210682, 0.00000018508, 4.96855124577,
 		213.2990954380, 0.00000016233, 0.03216483047, 2544.3144198834,
 		0.00000017293, 2.99116864949, 6275.9623029906);
 	//黄经泊松2项
 	var E12 = new Array(
 		0.00052918870, 0.00000000000, 0.0000000000, 0.00008719837, 1.07209665242,
 		6283.0758499914, 0.00000309125, 0.86728818832, 12566.1516999828,
 		0.00000027339, 0.05297871691, 3.5231183490,
 		0.00000016334, 5.18826691036, 26.2983197998, 0.00000015752, 3.68457889430,
 		155.4203994342, 0.00000009541, 0.75742297675, 18849.2275499742,
 		0.00000008937, 2.05705419118, 77713.7714681205,
 		0.00000006952, 0.82673305410, 775.5226113240, 0.00000005064, 4.66284525271,
 		1577.3435424478);
 	var E13 = new Array(0.00000289226, 5.84384198723, 6283.0758499914,
 		0.00000034955, 0.00000000000, 0.0000000000, 0.00000016819, 5.48766912348,
 		12566.1516999828);
 	var E14 = new Array(0.00000114084, 3.14159265359, 0.0000000000,
 		0.00000007717,
 		4.13446589358, 6283.0758499914, 0.00000000765, 3.83803776214,
 		12566.1516999828);
 	var E15 = new Array(0.00000000878, 3.14159265359, 0.0000000000);
 	//黄纬周期项
 	var E20 = new Array(
 		0.00000279620, 3.19870156017, 84334.6615813083, 0.00000101643,
 		5.42248619256, 5507.5532386674, 0.00000080445, 3.88013204458,
 		5223.6939198022, 0.00000043806, 3.70444689758, 2352.8661537718,
 		0.00000031933, 4.00026369781, 1577.3435424478, 0.00000022724,
 		3.98473831560,
 		1047.7473117547, 0.00000016392, 3.56456119782, 5856.4776591154,
 		0.00000018141, 4.98367470263, 6283.0758499914,
 		0.00000014443, 3.70275614914, 9437.7629348870, 0.00000014304,
 		3.41117857525,
 		10213.2855462110);
 	var E21 = new Array(0.00000009030, 3.89729061890, 5507.5532386674,
 		0.00000006177, 1.73038850355, 5223.6939198022);
 	//距离周期项
 	var E30 = new Array(
 		1.00013988799, 0.00000000000, 0.0000000000, 0.01670699626, 3.09846350771,
 		6283.0758499914, 0.00013956023, 3.05524609620, 12566.1516999828,
 		0.00003083720, 5.19846674381, 77713.7714681205,
 		0.00001628461, 1.17387749012, 5753.3848848968, 0.00001575568,
 		2.84685245825,
 		7860.4193924392, 0.00000924799, 5.45292234084, 11506.7697697936,
 		0.00000542444, 4.56409149777, 3930.2096962196);
 	var E31 = new Array(0.00103018608, 1.10748969588, 6283.0758499914,
 		0.00001721238, 1.06442301418, 12566.1516999828, 0.00000702215,
 		3.14159265359, 0.0000000000);
 	var E32 = new Array(0.00004359385, 5.78455133738, 6283.0758499914);
 	var E33 = new Array(0.00000144595, 4.27319435148, 6283.0758499914);
 	var nutB = new Array( //章动表
 		2.1824391966, -33.757045954, 0.0000362262, 3.7340E-08, -2.8793E-10, -
 		171996, -
 		1742, 92025, 89,
 		3.5069406862, 1256.663930738, 0.0000105845, 6.9813E-10, -2.2815E-10, -
 		13187, -
 		16, 5736, -31,
 		1.3375032491, 16799.418221925, -0.0000511866, 6.4626E-08, -5.3543E-10, -
 		2274, -2, 977, -5,
 		4.3648783932, -67.514091907, 0.0000724525, 7.4681E-08, -5.7586E-10, 2062,
 		2, -
 		895, 5,
 		0.0431251803, -628.301955171, 0.0000026820, 6.5935E-10, 5.5705E-11, -1426,
 		34, 54, -1,
 		2.3555557435, 8328.691425719, 0.0001545547, 2.5033E-07, -1.1863E-09, 712,
 		1, -
 		7, 0,
 		3.4638155059, 1884.965885909, 0.0000079025, 3.8785E-11, -2.8386E-10, -517,
 		12, 224, -6,
 		5.4382493597, 16833.175267879, -0.0000874129, 2.7285E-08, -2.4750E-10, -
 		386, -
 		4, 200, 0,
 		3.6930589926, 25128.109647645, 0.0001033681, 3.1496E-07, -1.7218E-09, -301,
 		0, 129, -1,
 		3.5500658664, 628.361975567, 0.0000132664, 1.3575E-09, -1.7245E-10, 217, -
 		5, -
 		95, 3);


 	//月球运动参数
 	var M10 = new Array(
 		22639.5857800, 2.3555558983, 8328.6914269556, 1.5702776E-04, 2.5041111E-07, -
 		1.1863391E-09, 4586.4383030, 8.0413775838, 7214.0628666680, -2.1392646E-04, -
 		1.8646419E-07, 8.7760973E-10,
 		2369.9139392, 10.3969334821, 15542.7542936235, -5.6898703E-05,
 		6.3946925E-08, -3.0872935E-10, 769.0257121, 4.7111117965, 16657.3828539111,
 		3.1405552E-04, 5.0082223E-07, -2.3726782E-09, -666.4171035, -0.0431251802,
 		628.3019551685, -2.6805348E-06, 7.1267611E-10, 7.2722052E-13, -411.5956723,
 		3.2558104667, 16866.9323162611, -1.1878420E-04, -9.8998954E-09,
 		4.0433461E-11,
 		211.6555505, 5.6858216855, -1114.6285602876, -3.7095422E-04, -
 		4.3687530E-07,
 		2.0639488E-09, 205.4358175, 8.0845027640, 6585.7609114995, -2.1124593E-04, -
 		1.8717687E-07, 8.7688251E-10,
 		191.9561970, 12.7524893803, 23871.4457205791, 1.0012905E-04, 3.1435804E-07, -
 		1.4950684E-09, 164.7285107, 10.4400586623, 14914.4523384550, -
 		5.4218168E-05,
 		6.3234248E-08, -3.0945657E-10, -147.3212870, -2.3986810785, -
 		7700.3894717871, -1.5970829E-04, -2.4969844E-07, 1.1870663E-09, -
 		124.9881188, 5.1984667410, 7771.3771468118, -2.8449352E-05, 3.1973462E-08, -
 		1.5436468E-10, -109.3802915, 2.3124307181, 8956.9933821240, 1.5434722E-04,
 		2.5112379E-07, -1.1856119E-09, 55.1770496, 7.1411230153, -1324.1780226376,
 		6.1885497E-05, 7.3846820E-08, -3.4916281E-10, -45.0996022, 5.6113663650,
 		25195.6237432166, 3.8243558E-05, 2.4051122E-07, -1.1459056E-09, 39.5332948, -
 		0.9002545685, -8538.2408893055, 2.7581196E-04, 2.6031101E-07, -
 		1.2267725E-09,
 		38.4298345, 18.4383110658, 22756.8171602915, -2.7082516E-04, -
 		1.2251727E-07,
 		5.6888037E-10, 36.1238137, 7.0666676948, 24986.0742808667, 4.7108327E-04,
 		7.5123334E-07, -3.5590172E-09,
 		30.7725749, 16.0827551676, 14428.1257333359, -4.2785292E-04, -
 		3.7292838E-07,
 		1.7552195E-09, -28.3970821, 7.9982524036, 7842.3648218365, -2.1660700E-04, -
 		1.8575151E-07, 8.7833695E-10, -24.3582123, 10.3538083018, 16171.0562487920, -
 		5.9579238E-05, 6.4659601E-08, -3.0800213E-10, -18.5847068, 2.8429108428, -
 		557.3142801438, -1.8547711E-04, -2.1843765E-07, 1.0319744E-09,
 		17.9544557, 5.1553415608, 8399.6791019802, -3.1129886E-05, 3.2686138E-08, -
 		1.5363746E-10, 14.5302683, 12.7956145605, 23243.1437654106, 1.0280959E-04,
 		3.1364536E-07, -1.4957957E-09,
 		14.3796973, 15.1080452786, 32200.1371475346, 2.5715681E-04, 5.6476915E-07, -
 		2.6814075E-09, 14.2488300, 27.2228150922, 2.3011968299, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		13.8990597, 20.7938669641, 31085.5085872470, -1.1379741E-04, 1.2789385E-07, -
 		6.1745870E-10, 13.1940634, 3.3302657873, -9443.3199872431, -5.2798198E-04, -
 		6.8728642E-07, 3.2502879E-09, -9.6790504, -4.7542369767, -16029.0808987426, -
 		3.1673605E-04, -5.0010955E-07, 2.3734054E-09, -9.3658620, 11.2971880505,
 		24080.9951829290, -3.3271066E-04, -1.9636409E-07, 9.1804319E-10,
 		8.6055261, 5.7289468657, -1742.9305154561, -3.6827368E-04, -4.3758798E-07,
 		2.0632216E-09, -8.4530982, 7.5540226393, 16100.0685737673, 1.2857841E-04,
 		2.8238458E-07, -1.3407038E-09,
 		8.0501618, 10.4831838425, 14286.1503832865, -5.1537634E-05, 6.2521572E-08, -
 		3.1018379E-10, -7.6301503, 4.6679866163, 17285.6848090796, 3.1137498E-04,
 		5.0153490E-07, -2.3719509E-09, -7.4474855, -0.0862503604, 1256.6039103370, -
 		5.3610697E-06, 1.4253522E-09, 1.4544410E-12, 7.3711915, 8.1276279442,
 		5957.4589563310, -2.0856539E-04, -1.8788954E-07, 8.7615528E-10,
 		7.0630400, 2.1824556033, -33.7570446083, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, -6.3831481, 9.4966789136, 7004.5134043180, 2.1891325E-04,
 		3.2425793E-07, -1.5355019E-09, -5.7416062, 13.6527439488, 32409.6866098846, -
 		1.7568290E-04, 5.4047029E-08, -2.6829589E-10, 4.3740066, 18.4814362461,
 		22128.5152051230, -2.6814463E-04, -1.2322994E-07, 5.6815315E-10, -
 		3.9976127,
 		7.9669222633, 33524.3151701722, 1.9527132E-04, 4.9092233E-07, -
 		2.3322447E-09, -3.2096876, 13.2398443248, 14985.4400134797, -2.4237581E-04, -
 		1.5449073E-07, 7.2324505E-10, -2.9145384, 12.7093642001, 24499.7476757476,
 		9.7448520E-05, 3.1507072E-07, -1.4943412E-09, 2.7318872, 16.1258803478,
 		13799.8237781674, -4.2517239E-04, -3.7364106E-07, 1.7544922E-09, -
 		2.5679426, -
 		2.4418062587, -7072.0875166186, -1.6238883E-04, -2.4898576E-07,
 		1.1877935E-09, -2.5211956, 7.9551272234, 8470.6667770049, -2.1928753E-04, -
 		1.8503884E-07, 8.7906417E-10,
 		2.4888854, 5.6426965053, -486.3266051191, -3.7363475E-04, -4.3616263E-07,
 		2.0646760E-09, 2.1460724, 7.1842481955, -1952.4799778060, 6.4566032E-05,
 		7.3134144E-08, -3.4989003E-10,
 		1.9777270, 23.1494228624, 39414.2000142026, 4.3230351E-05, 3.7830496E-07, -
 		1.8037978E-09, 1.9336824, 9.4222235931, 33314.7657078222, 6.2811103E-04,
 		1.0016445E-06, -4.7453563E-09,
 		1.8707635, 20.8369921443, 30457.2066320785, -1.1111687E-04, 1.2718117E-07, -
 		6.1818592E-10, -1.7529659, 0.4873549445, -8886.0057070993, -3.4250487E-04, -
 		4.6884877E-07, 2.2183135E-09, -1.4371612, 7.0979978351, -695.8760674691,
 		5.9204962E-05, 7.4559496E-08, -3.4843559E-10, -1.3725699, 1.4553013298, -
 		209.5494623500, 4.3283972E-04, 5.1072212E-07, -2.4131116E-09,
 		1.2618153, 7.5108974591, 16728.3705289358, 1.2589787E-04, 2.8309725E-07, -
 		1.3399765E-09);
 	var M11 = new Array(
 		1.6768000, -0.0431251802, 628.3019551685, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.5164200, 11.2260954176, 6585.7609114995, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.4138300, 13.5816513159, 14914.4523384550, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.3711500, -2.3986810785, -7700.3894717871, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.2756000, 2.3124307181, 8956.9933821240, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.2542500, 28.7591043399, 2.3011968299, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.0711800, 7.9982524036, 7842.3648218365, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.0612800, 10.3538083018, 16171.0562487920, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00);
 	var M12 = new Array(
 		0.0048700, -0.0431251802, 628.3019551685, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.0015000, 11.2260954176, 6585.7609114995, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.0012000, 13.5816513159, 14914.4523384550, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00);
 	var M20 = new Array(
 		18461.2386800, 1.6279052334, 8433.4661581305, -5.9392100E-05, -
 		4.9499477E-09, 2.0216731E-11, 1010.1670685, 3.9834611316, 16762.1575850861,
 		9.7635658E-05, 2.4546117E-07, -1.1661223E-09,
 		999.6935757, 0.7276506649, -104.7747311750, 2.1641986E-04, 2.5536106E-07, -
 		1.2065558E-09, 623.6524283, 8.7690282487, 7109.2881354930, 2.4933968E-06,
 		6.8896872E-08, -3.2894608E-10,
 		199.4837440, 9.6692828172, 15647.5290247985, -2.7331856E-04, -
 		1.9141414E-07,
 		8.9782646E-10, 166.5741022, 6.4134723504, -1219.4032914626, -1.5453436E-04, -
 		1.8151424E-07, 8.5739300E-10,
 		117.2606863, 12.0248387154, 23976.2204517541, -1.1629080E-04,
 		5.8996977E-08, -
 		2.8851262E-10, 61.9119452, 6.3390170299, 25090.8490120416, 2.5466342E-04,
 		4.9587228E-07, -2.3524614E-09,
 		33.3572002, 11.1245841469, 15437.9795624485, 1.5952115E-04, 3.1930799E-07, -
 		1.5152852E-09, 31.7596682, 3.0832065632, 8223.9166957806, 3.7344762E-04,
 		5.0577218E-07, -2.3928949E-09,
 		29.5765787, 8.8121534289, 6480.9861803245, 5.1739316E-06, 6.8184196E-08, -
 		3.2967330E-10, 15.5662641, 4.0579164522, -9548.0947184181, -3.1156212E-04, -
 		4.3192536E-07, 2.0437321E-09,
 		15.1215531, 14.3803946137, 32304.9118787096, 4.0736954E-05, 3.0940809E-07, -
 		1.4748517E-09, -12.0941423, 8.7259030685, 7737.5900906615, -1.8713808E-07,
 		6.9609548E-08, -3.2821886E-10,
 		8.8681361, 9.7124079974, 15019.2270696300, -2.7063803E-04, -1.9212681E-07,
 		8.9709924E-10, 8.0450800, 6.9519494760, 8399.7091135223, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		7.9585484, 12.0679638956, 23347.9184965856, -1.1361027E-04, 5.8284301E-08, -
 		2.8923984E-10, 7.4345496, 6.4565975306, -1847.7052466311, -1.5185383E-04, -
 		1.8222692E-07, 8.5666577E-10, -6.7314313, -4.0265863118, -16133.8556299176, -
 		1.0031619E-04, -2.4474849E-07, 1.1668496E-09, 6.5795745, 16.8104058325,
 		14323.3510021609, -2.1143306E-04, -1.1756732E-07, 5.4866364E-10, -
 		6.4600674,
 		1.5847800532, 9061.7681132990, -6.2072635E-05, -4.2372716E-09,
 		2.0943951E-11, -6.2964759, 4.8837157001, 25300.3984743916, -1.7817630E-04, -
 		1.4849843E-08, 6.0650192E-11, -5.6323496, -0.7707758451, 733.0766863435, -
 		2.1910039E-04, -2.5464839E-07, 1.2072830E-09, -5.3683957, 6.8263719744,
 		16204.8433049423, -8.7841452E-05, 2.7023515E-08, -1.3414795E-10, -
 		5.3112745,
 		3.9403359514, 17390.4595402546, 9.4955123E-05, 2.4617384E-07, -
 		1.1653951E-09, -5.0759142, 0.6845254847, 523.5272239935, 2.1373932E-04,
 		2.5607374E-07, -1.2058286E-09, -4.8396108, -1.6710304136, -7805.1642029621,
 		5.6711565E-05, 5.6626238E-09, -1.9489510E-11, -4.8057398, 3.5705615077, -
 		662.0890113188, 3.0942748E-05, 3.6923410E-08, -1.7458141E-10,
 		3.9840542, 8.6945729282, 33419.5404389972, 4.1169117E-04, 7.4628340E-07, -
 		3.5388005E-09, 3.6744616, 19.1659617307, 22652.0424291165, -5.4405306E-05,
 		1.3284380E-07, -6.3767543E-10,
 		2.9984812, 20.0662162992, 31190.2833184220, -3.3021726E-04, -1.2746721E-07,
 		5.8909710E-10, 2.7986407, -2.5281598018, -16971.7070474361, 3.3520406E-04,
 		2.6526096E-07, -1.2469893E-09,
 		2.4138772, 17.7106604009, 22861.5918914665, -4.8724502E-04, -3.7787833E-07,
 		1.7754362E-09, 2.1863127, 5.5132177819, -9757.6441807681, 1.2127760E-04,
 		7.8796768E-08, -3.6937954E-10,
 		2.1461690, 13.4801400452, 23766.6709894041, 3.1654891E-04, 5.6971910E-07, -
 		2.7016242E-09, 1.7659819, 11.1677093272, 14809.6776072800, 1.6220169E-04,
 		3.1859531E-07, -1.5160124E-09, -1.6244210, 7.3137269189, 7318.8375978429, -
 		4.3034632E-04, -4.4182525E-07, 2.0841655E-09, 1.5813035, 5.4387624614,
 		16552.6081227361, 5.3047537E-04, 7.5618329E-07, -3.5792340E-09,
 		1.5197527, 16.7359505120, 40633.6033056652, 1.9776471E-04, 5.5981921E-07, -
 		2.6611908E-09, 1.5156340, 1.7023605539, -17876.7861453737, -4.6858988E-04, -
 		6.8233647E-07, 3.2300712E-09,
 		1.3749700, 11.7539008996, 8399.6847317739, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, -1.3178213, 9.6261576370, 16275.8309799670, -2.7599910E-04, -
 		1.9070146E-07, 8.9855368E-10, -1.2642730, 11.9817135352, 24604.5224069225, -
 		1.1897134E-04, 5.9709653E-08, -2.8778540E-10, 1.1918722, 22.4217721975,
 		39518.9747453776, -1.7318951E-04, 1.2294390E-07, -5.9724197E-10,
 		1.1346102, 14.4235197939, 31676.6099235411, 4.3417489E-05, 3.0869542E-07, -
 		1.4755789E-09, 1.0857795, 8.8552786091, 5852.6842251560, 7.8544664E-06,
 		6.7471520E-08, -3.3040052E-10, -1.0193850, 7.2392715984, 33629.0899013472, -
 		2.1148542E-05, 2.3556127E-07, -1.1256889E-09, -0.8227135, 11.0814589667,
 		16066.2815176170, 1.5684062E-04, 3.2002066E-07, -1.5145579E-09,
 		0.8042232, 3.5274363274, -33.7870561503, 2.8262214E-05, 3.7636086E-08, -
 		1.7385419E-10, 0.8025933, 6.7832467942, 16833.1452601108, -9.0521986E-05,
 		2.7736191E-08, -1.3342073E-10, -0.7931861, -6.3821422101, -
 		24462.5470568732, -
 		2.5734395E-04, -4.9515961E-07, 2.3531886E-09, -0.7910147, 6.3703471702, -
 		591.1013362941, -1.5721490E-04, -1.8080157E-07, 8.5812022E-10, -0.6674056,
 		9.1819278727, 24533.5347318979, 6.9186306E-05, 2.7743463E-07, -
 		1.3204870E-09, 0.6502221, 4.1010416324, -10176.3966735866, -3.0888158E-04, -
 		4.3263803E-07, 2.0430049E-09, -0.6388127, 6.2958918497, 25719.1509672101,
 		2.5198288E-04, 4.9658496E-07, -2.3517342E-09);

 	var M21 = new Array(
 		0.0743000, 11.9537460825, 6480.9861803245, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.0304300, 8.7259030685, 7737.5900906615, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.0222900, 12.8540006510, 15019.2270696300, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.0199900, 15.2095565492, 23347.9184965856, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.0186900, 9.5981901842, -1847.7052466311, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.0169600, -4.0265863118, -16133.8556299176, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.0162300, 1.5847800532, 9061.7681132990, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.0141900, -0.7707758451, 733.0766863435, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00);

 	var M30 = new Array(
 		385000.5289868, 1.5707963268, 0.0000000000, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, -20905.3550432, 3.9263522251, 8328.6914269556,
 		1.5702776E-04,
 		2.5041111E-07, -1.1863391E-09, -3699.1109192, 9.6121739106,
 		7214.0628666680, -
 		2.1392646E-04, -1.8646419E-07, 8.7760973E-10, -2955.9675637, 11.9677298088,
 		15542.7542936235, -5.6898703E-05, 6.3946925E-08, -3.0872935E-10, -
 		569.9251214, 6.2819081233, 16657.3828539111, 3.1405552E-04, 5.0082223E-07, -
 		2.3726782E-09, 246.1584776, 7.2566180123, -1114.6285602876, -3.7095422E-04, -
 		4.3687530E-07, 2.0639488E-09, -204.5859838, 12.0108549891,
 		14914.4523384550, -
 		5.4218168E-05, 6.3234248E-08, -3.0945657E-10, -170.7330785, 14.3232857071,
 		23871.4457205791, 1.0012905E-04, 3.1435804E-07, -1.4950684E-09, -
 		152.1377115, 9.6552990908, 6585.7609114995, -2.1124593E-04, -1.8717687E-07,
 		8.7688251E-10, -129.6201387, -0.8278847517, -7700.3894717871, -
 		1.5970829E-04, -2.4969844E-07, 1.1870663E-09,
 		108.7427017, 6.7692630678, 7771.3771468118, -2.8449352E-05, 3.1973462E-08, -
 		1.5436468E-10, 104.7552252, 3.8832270449, 8956.9933821240, 1.5434722E-04,
 		2.5112379E-07, -1.1856119E-09,
 		79.6605562, 0.6705417583, -8538.2408893055, 2.7581196E-04, 2.6031101E-07, -
 		1.2267725E-09, 48.8882964, 1.5276711466, 628.3019551685, -2.6805348E-06,
 		7.1267611E-10, 7.2722052E-13, -34.7825237, 20.0091073926, 22756.8171602915, -
 		2.7082516E-04, -1.2251727E-07, 5.6888037E-10, 30.8238397, 11.9246046286,
 		16171.0562487920, -5.9579238E-05, 6.4659601E-08, -3.0800213E-10,
 		24.2084825, 9.5690487304, 7842.3648218365, -2.1660700E-04, -1.8575151E-07,
 		8.7833695E-10, -23.2104302, 8.6374640216, 24986.0742808667, 4.7108327E-04,
 		7.5123334E-07, -3.5590172E-09, -21.6363437, 17.6535514944,
 		14428.1257333359, -
 		4.2785292E-04, -3.7292838E-07, 1.7552195E-09, -16.6747130, 6.7261378876,
 		8399.6791019802, -3.1129886E-05, 3.2686138E-08, -1.5363746E-10,
 		14.4026888, 4.9010621141, -9443.3199872431, -5.2798198E-04, -6.8728642E-07,
 		3.2502879E-09, -12.8313951, 14.3664108873, 23243.1437654106, 1.0280959E-04,
 		3.1364536E-07, -1.4957957E-09, -11.6499478, 22.3646632909,
 		31085.5085872470, -
 		1.1379741E-04, 1.2789385E-07, -6.1745870E-10, -10.4447577, 16.6788416054,
 		32200.1371475346, 2.5715681E-04, 5.6476915E-07, -2.6814075E-09,
 		10.3211056, 8.7119193421, -1324.1780226376, 6.1885497E-05, 7.3846820E-08, -
 		3.4916281E-10, 10.0561967, 7.2997431925, -1742.9305154561, -3.6827368E-04, -
 		4.3758798E-07, 2.0632216E-09, -9.8844538, 12.0539801693, 14286.1503832865, -
 		5.1537634E-05, 6.2521572E-08, -3.1018379E-10, 8.7515612, 6.3563634438, -
 		9652.8694495931, -9.5142261E-05, -1.7656429E-07, 8.3717626E-10, -8.3791067,
 		4.4137071696, -557.3142801438, -1.8547711E-04, -2.1843765E-07,
 		1.0319744E-09, -7.0026914, -3.1834406499, -16029.0808987426, -
 		3.1673605E-04, -
 		5.0010955E-07, 2.3734054E-09,
 		6.3220032, 9.1248189661, 16100.0685737673, 1.2857841E-04, 2.8238458E-07, -
 		1.3407038E-09, 5.7508540, 6.2387829431, 17285.6848090796, 3.1137498E-04,
 		5.0153490E-07, -2.3719509E-09, -4.9501284, 9.6984242710, 5957.4589563310, -
 		2.0856539E-04, -1.8788954E-07, 8.7615528E-10, -4.4211763, 3.0260976566, -
 		209.5494623500, 4.3283972E-04, 5.1072212E-07, -2.4131116E-09,
 		4.1311139, 11.0674752404, 7004.5134043180, 2.1891325E-04, 3.2425793E-07, -
 		1.5355019E-09, -3.9579801, 20.0522325728, 22128.5152051230, -2.6814463E-04, -
 		1.2322994E-07, 5.6815315E-10,
 		3.2582371, 14.8106406516, 14985.4400134797, -2.4237581E-04, -1.5449073E-07,
 		7.2324505E-10, -3.1483016, 4.8266067935, 16866.9323162611, -1.1878420E-04, -
 		9.8998954E-09, 4.0433461E-11,
 		2.6164074, 14.2801605269, 24499.7476757476, 9.7448520E-05, 3.1507072E-07, -
 		1.4943412E-09, 2.3536279, 9.5259235502, 8470.6667770049, -2.1928753E-04, -
 		1.8503884E-07, 8.7906417E-10, -2.1171255, -0.8710099319, -7072.0875166186, -
 		1.6238883E-04, -2.4898576E-07, 1.1877935E-09, -1.8970355, 17.6966766746,
 		13799.8237781674, -4.2517239E-04, -3.7364106E-07, 1.7544922E-09, -
 		1.7385258,
 		2.0581512713, -8886.0057070993, -3.4250487E-04, -4.6884877E-07,
 		2.2183135E-09, -1.5713934, 22.4077884711, 30457.2066320785, -1.1111687E-04,
 		1.2718117E-07, -6.1818592E-10, -1.4225541, 24.7202191892, 39414.2000142026,
 		4.3230351E-05, 3.7830496E-07, -1.8037978E-09, -1.4189284, 17.1661965499,
 		23314.1314404353, -8.5348055E-05, 9.5920387E-08, -4.6309403E-10,
 		1.1655348, 3.8401018646, 9585.2953372925, 1.5166669E-04, 2.5183647E-07, -
 		1.1848846E-09, -1.1169371, 10.9930199199, 33314.7657078222, 6.2811103E-04,
 		1.0016445E-06, -4.7453563E-09,
 		1.0656709, 1.4845459664, 1256.6039103370, -5.3610697E-06, 1.4253522E-09,
 		1.4544410E-12, 1.0587000, 11.9221105867, 8364.7398435733, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00, -0.9333170, 9.0816937859, 16728.3705289358,
 		1.2589787E-04, 2.8309725E-07, -1.3399765E-09, 0.8624328, 12.4550847533,
 		6656.7485865242, -3.9940357E-04, -4.0490184E-07, 1.9095841E-09,
 		0.8512398, 4.3705819893, 70.9876750247, -1.8815764E-04, -2.1772498E-07,
 		1.0327016E-09, -0.8488013, 16.7219667856, 31571.8351923661, 2.5983735E-04,
 		5.6405648E-07, -2.6821347E-09, -0.7956262, 3.5134526011, -9095.5551694493,
 		9.0334848E-05, 4.1873358E-08, -1.9479814E-10);
 	var M31 = new Array(
 		0.5139500, 12.0108549891, 14914.4523384550, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.3824500, 9.6552990908, 6585.7609114995, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.3265400, -0.8278847517, -7700.3894717871, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.2639600, 7.0248196984, 8956.9933821240, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.1230200, 4.6692638002, 628.3019551685, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.0775400, 15.0661972822, 16171.0562487920, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00,
 		0.0606800, 12.7106413840, 7842.3648218365, 0.0000000E+00, 0.0000000E+00,
 		0.0000000E+00, 0.0497000, 12.0539801693, 14286.1503832865, 0.0000000E+00,
 		0.0000000E+00, 0.0000000E+00);

 	var M1n = new Array(3.81034443059, 8399.68473177391, -2.85472839848E-05, //月球平黄经系数
 		3.20170955005E-08, -1.53637455544E-10);
 }